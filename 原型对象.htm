<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>原型对象与实例的关系</title>
	</head>
	<body>
	<script>

	// 初始原型对象写法
	function P(){};
	var aa = new P();
	P.prototype.name = "hi";
	P.prototype.sayName = function(){console.log(this.name)};
	aa.sayName();

	// 字面量写法会重写原型对象，此时P.prototype的constructor属性不再指向构造函数P,并且重写的原型对象会切断对象实例的联系
	function P(){};
	var aa = new P();
	P.prototype = {
	  name:"hi",
	  sayName:function(){console.log(this.name)}
	}
	aa.sayName();

	//重写之后再实例对象，就可以保持联系
	function P(){};
	P.prototype = {
	  name:"hi",
	  sayName:function(){console.log(this.name)}
	}
	var aa = new P();

	aa.sayName();

	// 继续拓展例子
	function P(){};
	P.prototype = {
	  name:"hi",
	  sayName:function(){console.log(this.name)}
	}
	var aa = new P();
	P.prototype.sayHello=function(){console.log('hello')}
	aa.sayHello();

	// 继续拓展例子，此时重写的原型对象与实例已经切断联系，实例指向的还是最初的原型对象
	function P(){};
	P.prototype = {
	  name:"hi",
	  sayName:function(){console.log(this.name)}
	}
	var aa = new P();
	P.prototype = {
	  name:'hello'
	}
	aa.sayName();

	//继续拓展例子
	function P(){};
	P.prototype = {
	  name:"hi",
	  sayName:function(){console.log(this.name)}
	}
	var aa = new P();
	P.prototype.name = 'hello';
	aa.sayName();

/*************************原型模式存在的问题********************************/
// 1.省略了构造函数的初始化，结果所有实例在默认情况下都将获得相同的属性值
// 2.实例1改变引用类型的属性值时，会改变原型，其他原型对象也会引用了改变后的属性值
	function P(){};
	P.prototype = {
	  friends:['tom','tide']
	}
	var a1 = new P();
	var a2 = new P();
	a1.friends = ['aaa','bbb'];
	console.log(a1.friends);
	console.log(a2.friends);
	console.log(P.prototype.friends);

	// 例子2
	function P(){};
	P.prototype = {
	  friends:['tom','tide']
	}
	var a1 = new P();
	var a2 = new P();
	a1.friends.push('aaaa');
	console.log(a1.friends);
	console.log(a2.friends);
	console.log(P.prototype.friends);
	</script>
	</body>
</html>